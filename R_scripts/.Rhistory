geom_text(aes(x = 7500, label = GHubness, y = ymin+0.5), hub_val, inherit.aes = F) +
facet_wrap( ~ k) +
ggtitle(paste0('Number of hubs with Lp norm across dimensions,\np=',p,',\nMethod ',method_index))
}
get_hub3 <- function(df,kval,dimval,pval,log=F) { # Using the method from [1] >= 2k
if (log==T) {
hub_nb = c()
ymin = c()
ymax = c()
y_increment = 1
for (d in dimval) {
for (k in kval) {
for (p in pval) {
val = df$Hubness_score[df$Dimension==d & df$p==p & df$k==k]
hub_nb = c(hub_nb, sum(val>=2*log(k)))
ymin = c(ymin,y_increment)
ymax = c(ymax,y_increment+1)
}
}
y_increment <- y_increment+1
}
}
else {
hub_nb = c()
ymin = c()
ymax = c()
y_increment = 1
for (d in dimval) {
for (k in kval) {
for (p in pval) {
val = df$Hubness_score[df$Dimension==d & df$p==p & df$k==k]
hub_nb = c(hub_nb, sum(val>=2*k))
ymin = c(ymin,y_increment)
ymax = c(ymax,y_increment+1)
}
}
y_increment <- y_increment+1
}
}
hub_val <- data.frame("p"=rep(pval,times=length(dimval)*length(kval)),
"k"=rep(rep(kval,each=length(pval)),times=length(dimval)),
"Dimension"=rep(dimval,each=length(kval)*length(pval)),
"GHubness"=hub_nb,
"ymin"=ymin,
"ymax"=ymax)
hub_val$Threshold <- 2*hub_val$k
return(hub_val)
}
get_hub4 <- function(df,kval,dimval,pval) { # skewness
s = c()
for (d in dimval) {
for (k in kval) {
for (p in pval) {
val = df$Hubness_score[df$Dimension==d & df$p==p & df$k==k]
s = c(s, mean((val-mean(val))^3)/sd(val)^3)
}
}
}
skewness_val <- data.frame("p"=rep(pval,times=length(dimval)*length(kval)),
"k"=rep(rep(kval,each=length(pval)),times=length(dimval)),
"Dimension"=rep(dimval,each=length(kval)*length(pval)),
"GHubness"=s)
skewness_val$Dimension <- factor(skewness_val$Dimension, levels = dimval)
return(skewness_val)
}
plot_evol_pval <- function(hub_val,method_name,label.y) {
ggplot(hub_val, aes(x=factor(Dimension), y=GHubness, color=factor(p))) +
geom_point() +
ylab(label.y) +
geom_line(aes(group=p),linetype='dotted') +
ggtitle(method_name) +
facet_wrap(~k)
}
plot_evol_dimval <- function(hub_val,method_name,label.y) {
ggplot(hub_val, aes(x=factor(p), y=GHubness, color=factor(Dimension))) +
geom_point() +
ylab(label.y) +
geom_line(aes(group=Dimension),linetype='dotted') +
ggtitle(method_name) +
facet_wrap(~k)
}
get_hub5 <- function(df,kval,dimval,pval) { # mu + 3 sigma_left
x_thd = c()
hub_nb = c()
ymin = c()
ymax = c()
y_increment = 1
for (d in dimval) {
for (k in kval) {
for (p in pval) {
val = df$Hubness_score[df$Dimension==d & df$p==p & df$k==k]
mu = mean(val)
left_val = val[val<=mu]
mirror_val = c(left_val,2*mu-left_val)
left_sigma = sd(mirror_val)
x_thd = c(x_thd,mu+3*left_sigma)
hub_nb = c(hub_nb, sum(val>=(mu+3*left_sigma)))
ymin = c(ymin,y_increment)
ymax = c(ymax,y_increment+1)
}
}
y_increment <- y_increment+1
}
hub_val <- data.frame("p"=rep(pval,times=length(dimval)*length(kval)),
"k"=rep(rep(kval,each=length(pval)),times=length(dimval)),
"Dimension"=rep(dimval,each=length(kval)*length(pval)),
"GHubness"=hub_nb,
"Threshold"=x_thd,
"ymin"=ymin,
"ymax"=ymax)
return(hub_val)
}
get_hub6 <- function(df,kval,dimval,pval) { # anti hubs
anti_hub = c()
for (d in dimval) {
for (k in kval) {
for (p in pval) {
anti_hub = c(anti_hub,unique(df$Antihubs[df$Dimension==d & df$p==p & df$k==k]))
}
}
}
hub_val <- data.frame("p"=rep(pval,times=length(dimval)*length(kval)),
"k"=rep(rep(kval,each=length(pval)),times=length(dimval)),
"Dimension"=rep(dimval,each=length(kval)*length(pval)),
"GHubness"=anti_hub)
hub_val$Dimension <- factor(hub_val$Dimension, levels = dimval)
return(hub_val)
}
get_hub7 <- function(df,kval,dimval,pval) { # median + 3MAD
x_thd = c()
hub_nb = c()
ymin = c()
ymax = c()
y_increment = 1
for (d in dimval) {
for (k in kval) {
for (p in pval) {
val = df$Hubness_score[df$Dimension==d & df$p==p & df$k==k]
x_thd = c(x_thd, median(val)+3*mad(val,
#center=ifelse(median(val)!=0,median(val),1)
))
hub_nb = c(hub_nb, sum(val>=(median(val)+3*mad(val,
#center=ifelse(median(val)!=0,median(val),1)
))))
ymin = c(ymin,y_increment)
ymax = c(ymax,y_increment+1)
}
}
y_increment <- y_increment+1
}
hub_val <- data.frame("p"=rep(pval,times=length(dimval)*length(kval)),
"k"=rep(rep(kval,each=length(pval)),times=length(dimval)),
"Dimension"=rep(dimval,each=length(kval)*length(pval)),
"GHubness"=hub_nb,
"Threshold"=x_thd,
"ymin"=ymin,
"ymax"=ymax)
return(hub_val)
}
get_hub_comp <- function(df,kval,dimval,p1,p2,method) { # Summary plot for the max comparison between two Lp norms
hub1 = method(df,kval,dimval,p1)$GHubness
hub2 = method(df,kval,dimval,p2)$GHubness
hub_comp_val <- data.frame("p1"=p1,
"p2"=p2,
"k"=kval,
"Dimension"=rep(dimval,each=length(kval)),
"GHubness1"=hub1,
"GHubness2"=hub2,
"Difference_amplitude"=hub2-hub1)
return(hub_comp_val)
}
# Merge the dfs
kval=c(5,10,20,50,100,200)
dimval=as.character(c(2,5,10,50,100,500,1000,5000,9047))
hub_max_0.1 <- get_hub1(hubness, kval=kval,dimval=dimval,pval="0.1")
hub_max_1 <- get_hub1(hubness, kval=kval,dimval=dimval,pval="1")
hub_max_2 <- get_hub1(hubness, kval=kval,dimval=dimval,pval="2")
# Viz
p0.1 <- plot_thd(hubness, hub_max_0.1, "0.1")
p1 <- plot_thd(hubness, hub_max_1, "1")
p2 <- plot_thd(hubness, hub_max_2, "2")
ggarrange(p0.1,p1,p2, common.legend = T)
# Merge the dfs
kval=c(5,10,20,50,100,200)
dimval=as.character(c(2,5,10,50,100,500,1000,5000,9047))
hub_musig_0.1 <- get_hub2(hubness, kval=kval,dimval=dimval,pval="0.1")
hub_musig_1 <- get_hub2(hubness, kval=kval,dimval=dimval,pval="1")
hub_musig_2 <- get_hub2(hubness, kval=kval,dimval=dimval,pval="2")
# Viz
p0.1 <- plot_thd_txt(hubness, hub_musig_0.1, "0.1", "2")
p1 <- plot_thd_txt(hubness, hub_musig_1, "1", "2")
p2 <- plot_thd_txt(hubness, hub_musig_2, "2", "2")
ggarrange(p0.1,p1,p2, common.legend = T)
# Merge the dfs
kval=c(5,10,20,50,100,200)
dimval=as.character(c(2,5,10,50,100,500,1000,5000,9047))
hub_2k_0.1 <- get_hub3(hubness, kval=kval,dimval=dimval,pval="0.1")
hub_2k_1 <- get_hub3(hubness, kval=kval,dimval=dimval,pval="1")
hub_2k_2 <- get_hub3(hubness, kval=kval,dimval=dimval,pval="2")
# Viz
p0.1 <- plot_thd_txt(hubness, hub_2k_0.1, "0.1", "3")
p1 <- plot_thd_txt(hubness, hub_2k_1, "1", "3")
p2 <- plot_thd_txt(hubness, hub_2k_2, "2", "3")
ggarrange(p0.1,p1,p2, common.legend = T)
# Merge the dfs
kval=c(5,10,20,50,100,200)
dimval=as.character(c(2,5,10,50,100,500,1000,5000,9047))
hub_skewness_0.1 <- get_hub4(hubness, kval=kval,dimval=dimval,pval="0.1")
hub_skewness_1 <- get_hub4(hubness, kval=kval,dimval=dimval,pval="1")
hub_skewness_2 <- get_hub4(hubness, kval=kval,dimval=dimval,pval="2")
hub_skewness <- get_hub4(hubness, kval=kval,dimval=dimval,pval=c("0.1","1","2"))
# Viz
p0.1a <- plot_evol_pval(hub_skewness_0.1, pval="0.1", method_name="Skewness")
# Merge the dfs
dimval <- c(2,5,10,50,100,500,1000,5000,9047)
kval <- c(5,10,20,50,100,200)
pval <- c(0.1,0.5,1,1.5,2,4)
hub_max <- get_hub1(hubness, kval=kval,dimval=dimval,pval=pval)
# Viz
plot_evol_dimval(hub_max, "Maximum score across Lp norms","Maximum hubness score")
plot_evol_pval(hub_max, "Maximum score across dimensions","Maximum hubness score")
# Merge the dfs
dimval <- c(2,5,10,50,100,500,1000,5000,9047)
kval <- c(5,10,20,50,100,200)
pval <- c(0.1,0.5,1,1.5,2,4)
hub_musig <- get_hub2(hubness, kval=kval,dimval=dimval,pval=pval)
# Viz
plot_evol_dimval(hub_musig, expression(paste("Global hubness defined by cells with a score above ",mu,"+3",sigma," across Lp norms")),"Hubs count")
plot_evol_pval(hub_musig, expression(paste("Global hubness defined by cells with a score above ",mu,"+3",sigma," across dimensions")),"Hubs count")
# Merge the dfs
dimval <- c(2,5,10,50,100,500,1000,5000,9047)
kval <- c(5,10,20,50,100,200)
pval <- c(0.1,0.5,1,1.5,2,4)
hub_2k <- get_hub3(hubness, kval=kval,dimval=dimval,pval=pval)
# Viz
plot_evol_dimval(hub_2k, "Global hubness defined by cells with a score above 2k, across Lp norms","Hubs count")
plot_evol_pval(hub_2k, "Global hubness defined by cells with a score above 2k, across dimensions","Hubs count")
# Merge the dfs
dimval <- c(2,5,10,50,100,500,1000,5000,9047)
kval <- c(5,10,20,50,100,200)
pval <- c(0.1,0.5,1,1.5,2,4)
hub_skewness <- get_hub4(hubness, kval=kval,dimval=dimval,pval=pval)
# Viz
plot_evol_dimval(hub_skewness, "Skewness across Lp norms","Skewness")
plot_evol_pval(hub_skewness, "Skewness across dimensions","Skewness")
# Merge the dfs
dimval <- c(2,5,10,50,100,500,1000,5000,9047)
kval <- c(5,10,20,50,100,200)
pval <- c(0.1,0.5,1,1.5,2,4)
hub_musigleft <- get_hub5(hubness, kval=kval,dimval=dimval,pval=pval)
# Viz
plot_evol_dimval(hub_musigleft, expression(paste("Global hubness defined by cells with a score above ",mu,"+3",sigma,"_l across Lp norms")),"Hubs count")
plot_evol_pval(hub_musigleft, expression(paste("Global hubness defined by cells with a score above ",mu,"+3",sigma,"_l across dimensions")),"Hubs count")
# Merge the dfs
dimval <- c(2,5,10,50,100,500,1000,5000,9047)
kval <- c(5,10,20,50,100,200)
pval <- c(0.1,0.5,1,1.5,2,4)
hub_antihub <- get_hub6(hubness, kval=kval,dimval=dimval,pval=pval)
# Viz
plot_evol_dimval(hub_antihub, "Antihub occurence across Lp norms","Antihubs count")
plot_evol_pval(hub_antihub, "Antihub occurence across dimensions","Antihubs count")
# Merge the dfs
dimval <- c(2,5,10,50,100,500,1000,5000,9047)
kval <- c(5,10,20,50,100,200)
pval <- c(0.1,0.5,1,1.5,2,4)
hub_mad <- get_hub7(hubness, kval=kval,dimval=dimval,pval=pval)
# Viz
plot_evol_dimval(hub_mad, "Global hubness defined by cells with a score above median+3MAD across Lp norms","Hubs count")
plot_evol_pval(hub_mad, "Global hubness defined by cells with a score above median+3MAD across dimensions","Hubs count")
# Merge the dfs
dimval <- c(2,5,10,50,100,500,1000,5000,9047)
kval <- c(5,10,20,50,100,200)
p1 <- 1
p2 <- 2
difference <- get_hub_comp(hubness, kval=kval,dimval=dimval,p1=p1,p2=p2)
p1=
plot_evol_dimval(hub_mad, "Global hubness defined by cells with a score above median+3MAD across Lp norms","Hubs count")
p2=plot_evol_pval(hub_mad, "Global hubness defined by cells with a score above median+3MAD across dimensions","Hubs count")
ggarrange(p1,p2)
p1=
plot_evol_dimval(hub_antihub, "Antihub occurence across Lp norms","Antihubs count")
p2=plot_evol_pval(hub_antihub, "Antihub occurence across dimensions","Antihubs count")
ggarrange(p1,p2)
p1=plot_evol_dimval(hub_musigleft, expression(paste("Global hubness defined by cells with a score above ",mu,"+3",sigma,"_l across Lp norms")),"Hubs count")
p2=plot_evol_pval(hub_musigleft, expression(paste("Global hubness defined by cells with a score above ",mu,"+3",sigma,"_l across dimensions")),"Hubs count")
ggarrange(p1,p2)
p1=
plot_evol_dimval(hub_skewness, "Skewness across Lp norms","Skewness")
p2=
plot_evol_pval(hub_skewness, "Skewness across dimensions","Skewness")
ggarrange(p1,p2)
p1=
plot_evol_pval(hub_skewness, "Skewness across dimensions","Skewness")
p2=
plot_evol_pval(hub_2k, "Global hubness defined by cells with a score above 2k, across dimensions","Hubs count")
ggarrange(p1,p2)
p1=
plot_evol_dimval(hub_musig, expression(paste("Global hubness defined by cells with a score above ",mu,"+3",sigma," across Lp norms")),"Hubs count")
p2=
plot_evol_pval(hub_musig, expression(paste("Global hubness defined by cells with a score above ",mu,"+3",sigma," across dimensions")),"Hubs count")
ggarrange(p1,p2)
p1=
plot_evol_dimval(hub_max, "Maximum score across Lp norms","Maximum hubness score")
p2=
plot_evol_pval(hub_max, "Maximum score across dimensions","Maximum hubness score")
ggarrange(p1,p2)
p1=plot_evol_dimval(hub_2k, "Global hubness defined by cells with a score above 2k, across Lp norms","Hubs count")
p2=plot_evol_pval(hub_2k, "Global hubness defined by cells with a score above 2k, across dimensions","Hubs count")
ggarrange(p1,p2)
gc()
gc()
library(pbapply)
library(ggplot2)
datasets = c("Baron","Darmanis","Guo","PDX1","Satija","Silver","Zheng4","Zheng8","BRCA")
counts <- pblapply(datasets,
function(x) {
source(file=paste0("/Users/elise/Desktop/GitHub/Hubness_sc/R_scripts/load_data/load_counts_",x,".R"));
return(data)})
datasets = c("Baron","Darmanis","Guo","PDX1","Satija","Silver","Zheng4","Zheng8","BRCA")
path_before <- c("/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_Baron.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Darmanis.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Guo_lung_2018/GSE99254_NSCLC.TCell.S9055.count.labeled.txt",
"/Users/elise/Desktop/Imagine_bckp/scRNAseq/Data_sc/hubness_data/10X/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_GSE115189Silver.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Zhengmix4eq.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Zhengmix8eq.rds",
"/Users/elise/Desktop/GitHub/Hubness_sc/bulkRNAseq/Raw_data_TCGA-BRCA.RData")
counts <- pblapply(datasets,
function(x) {
source(file=paste0("/Users/elise/Desktop/GitHub/Hubness_sc/R_scripts/load_data/load_counts_",x,".R"));
return(data)})
sparsity <- pbsapply(counts, function(x) sum(x==0)/ncol(x)/nrow(x)*100)
gene_nb <- pbsapply(counts, function(x) nrow(x))
df <- data.frame("Dataset"=datasets,
"Sparsity"=sparsity,
"Gene_nb"=gene_nb)
ggplot(df, aes(x=Gene_nb, y=Sparsity, color=Dataset)) + geom_point()
load_rds <- function(path) {
data <- readRDS(path)
return(data@assays$data$counts)
}
baron <- load_rds(path_before[1])
baron <- load_rds(path_before[1])
```
load_rdata <- function(path) {
load(path)
rownames(data) <- data[,1]
return(data[,-1])
}
load_rds <- function(path) {
data <- readRDS(path)
return(data@assays$data$counts)
}
load_rdata <- function(path) {
load(path)
rownames(data) <- data[,1]
return(data[,-1])
}
Baron <- load_rds(path_before[1])
Darmanis <- load_rds(path_before[2])
Guo <- read.table(path_before[3])
Satija <- read.csv(path_before[5], header = T, row.names = 1)
Satija <- read.csv(path_before[4], header = T, row.names = 1)
path_before <- c("/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_Baron.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Darmanis.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Guo_lung_2018/GSE99254_NSCLC.TCell.S9055.count.labeled.txt",
"/Users/elise/Desktop/Imagine_bckp/scRNAseq/Data_sc/hubness_data/10X/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_GSE115189Silver.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Zhengmix4eq.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Zhengmix8eq.rds",
"/Users/elise/Desktop/GitHub/Hubness_sc/bulkRNAseq/Raw_data_TCGA-BRCA.RData")
Satija <- read.csv(path_before[4], header = T, row.names = 1)
path_before[4]
path_before <- c("/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_Baron.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Darmanis.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Guo_lung_2018/GSE99254_NSCLC.TCell.S9055.count.labeled.txt",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/10x/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_GSE115189Silver.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Zhengmix4eq.rds",
"/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Zhengmix8eq.rds",
"/Users/elise/Desktop/GitHub/Hubness_sc/bulkRNAseq/Raw_data_TCGA-BRCA.RData")
Satija <- read.csv(path_before[4], header = T, row.names = 1)
Satija <- read.csv(path_before[4], header = T, row.names = 1)
Satija <- Satija[grep("HUMAN_",rownames(Satija)),]
rownames(Satija) <- gsub("HUMAN_","",rownames(Satija))
Silver <- load_rds(path_before[5])
Zheng4 <- load_rds(path_before[6])
Zheng8 <- load_rds(path_before[7])
BRCA <- load_rdata(path_before[8])
counts_tot <- list(Baron,Darmanis,Guo,Satija,Silver,Zheng4,Zheng8,BRCA)
counts_tot
names(counts_tot) <- c("Baron","Darmanis","Guo","Satija","Silver","Zheng4","Zheng8","BRCA")
sparsity_tot <- pbsapply(counts_tot, function(x) sum(x==0)/ncol(x)/nrow(x)*100)
gene_nb_tot <- pbsapply(counts_tot, function(x) nrow(x))
df <- data.frame("Dataset"=c(datasets,names(counts_tot)),
"Sparsity"=c(sparsity,sparsity_tot),
"Gene_nb"=c(gene_nb,gene_nb_tot))
ggplot(df, aes(x=Gene_nb, y=Sparsity, color=Dataset)) + geom_point()
ggplot(df, aes(x=Gene_nb, y=Sparsity, color=Dataset)) + geom_point() + geom_line(aes(group=Dataset))
ggplot(df, aes(x=Gene_nb, y=Sparsity, color=Dataset)) + geom_point() + geom_line(aes(group=Dataset), lty=2)
df <- data.frame("Dataset"=c(datasets,names(counts_tot)),
"Sparsity"=c(sparsity,sparsity_tot),
"Gene_nb"=c(gene_nb,gene_nb_tot),
"Filter"=c(rep("yes",length(counts)),rep("no",length(counts_tot))))
ggplot(df, aes(x=Gene_nb, y=Sparsity, color=Dataset)) + geom_point(aes(shape=Filter)) + geom_line(aes(group=Dataset), lty=2)
ggplot(df, aes(x=Gene_nb, y=Sparsity, color=Dataset)) +
geom_point(aes(shape=Filter)) +
geom_line(aes(group=Dataset), lty=2) +
ylab("Sparsity (%)")
ggplot(df, aes(x=Gene_nb, y=Sparsity, color=Dataset)) +
geom_point(aes(shape=Filter)) +
geom_line(aes(group=Dataset), lty=2) +
xlab("Number of genes") +
ylab("Sparsity (%)")
library(philentropy, quietly = T)
library(ggplot2, quietly = T)
library(viridis, quietly = T)
library(ggridges, quietly = T)
library(scales, quietly = T)
library(ggpubr, quietly = T)
library(pbapply, quietly = T)
source(file="/Users/elise/Desktop/GitHub/Hubness_sc/R_scripts/load_data/hubness_load_write_data_simul.R")
get_hub4 <- function(df,kval,pcval,pval) { # skewness
s = c()
for (d in pcval) {
for (k in kval) {
for (p in pval) {
val = df$score[df$Dimension==d & df$p==p & df$k==k]
s = c(s, mean((val-mean(val))^3)/sd(val)^3)
}
}
}
skewness_val <- data.frame("p"=rep(pval,times=length(pcval)*length(kval)),
"k"=rep(rep(kval,each=length(pval)),times=length(pcval)),
"Dimension"=rep(pcval,each=length(kval)*length(pval)),
"GHubness"=s)
skewness_val$Dimension <- factor(skewness_val$Dimension, levels = pcval)
return(skewness_val)
}
pcval <- sapply(hubness, function(x) sort(unique(x$Dimension), decreasing = T)[2])
minkow=2
skewness <- pbmapply(x=hubness, y=pcval, function(x,y) get_hub4(x,kval=kval,pcval=y,pval=minkow)$GHubness)
skewness <- data.frame("Skewness"=as.vector(skewness))
skewness$k <- kval
skewness$Dropout <- rep(dropout_percent, each=length(kval))
skewness$Size <- cell_nb
ggplot(skewness, aes(x=Dropout, y=Skewness, color=factor(k))) + geom_point() + geom_line(aes(group=k))
library(philentropy, quietly = T)
library(ggplot2, quietly = T)
library(viridis, quietly = T)
library(ggridges, quietly = T)
library(scales, quietly = T)
library(ggpubr, quietly = T)
library(pbapply, quietly = T)
source(file="/Users/elise/Desktop/GitHub/Hubness_sc/R_scripts/load_data/hubness_load_write_data_simul.R")
get_hub4 <- function(df,kval,pcval,pval) { # skewness
s = c()
for (d in pcval) {
for (k in kval) {
for (p in pval) {
val = df$score[df$Dimension==d & df$p==p & df$k==k]
s = c(s, mean((val-mean(val))^3)/sd(val)^3)
}
}
}
skewness_val <- data.frame("p"=rep(pval,times=length(pcval)*length(kval)),
"k"=rep(rep(kval,each=length(pval)),times=length(pcval)),
"Dimension"=rep(pcval,each=length(kval)*length(pval)),
"GHubness"=s)
skewness_val$Dimension <- factor(skewness_val$Dimension, levels = pcval)
return(skewness_val)
}
minkow=2
skewness <- pbmapply(x=hubness, function(x,y) get_hub4(x,kval=kval,pcval=y,pval=minkow)$GHubness, y=pcval)
skewness
skewness <- pbmapply(x=hubness, function(x) get_hub4(x,kval=kval,pcval=pcval,pval=minkow)$GHubness)
skewness
skewness <- pbmapply(x=hubness, function(x) get_hub4(x,kval=50,pcval=pcval,pval=minkow)$GHubness)
skewness
skewness <- pblapply(x=hubness, function(x) get_hub4(x,kval=50,pcval=pcval,pval=minkow)$GHubness)
skewness <- pbsapply(x=hubness, function(x) get_hub4(x,kval=50,pcval=pcval,pval=minkow)$GHubness)
skewness <- pbsapply(x=hubness, FUN=function(x) get_hub4(x,kval=50,pcval=pcval,pval=minkow)$GHubness)
skewness <- pbsapply(X=hubness, FUN=function(x) get_hub4(x,kval=50,pcval=pcval,pval=minkow)$GHubness)
skewness
as.vector(skewness)
skewness <- data.frame("Skewness"=as.vector(skewness),
"Dimension"=rep(pcval,times=length(hubness)))
skewness$Dropout <- rep(dropout_percent, each=length(kval))
skewness$Dropout <- rep(dropout_percent, each=length(pcval))
skewness$Size <- cell_nb
ggplot(skewness, aes(x=Dropout, y=Skewness, color=factor(k))) + geom_point() + geom_line(aes(group=k))
ggplot(skewness, aes(x=Dropout, y=Skewness, color=Dimension)) + geom_point() + geom_line(aes(group=Dimension))
ggplot(skewness, aes(x=Dropout, y=Skewness, color=Dimension)) + geom_point() + geom_line(aes(group=Dimension), lty=2)
source(file="/Users/elise/Desktop/GitHub/Hubness_sc/R_scripts/load_data/hubness_load_write_data_simul.R")
hubness <- lapply(hubness, function(x) {x$cellID <- names(hubness_scores_data[[1]][[1]][[1]]); return(x)})
dropout_percent <- c(5,10,20,30,40,50,75,80,85,90,95)
counts_path <- sapply(dropout_percent, function(y) paste0("/Users/elise/Desktop/GitHub/Hubness_sc/bulkRNAseq/simul",y,".csv"))
pca_path <- sapply(dropout_percent, function(y) paste0("/Users/elise/Desktop/GitHub/Hubness_sc/bulkRNAseq/simul_pca_readyforhubness",y,".csv"))
simul <- lapply(counts_path, function(x) read.table(x))
library(pbapply)
library(Seurat)
library(ggplot2)
library(dplyr)
library(pbapply)
data_in <- "/Users/elise/Desktop/Thèse/scRNAseq/Data_sc/Luis/sce_full_Zhengmix8eq.rds"
data_out <- "/Users/elise/Desktop/GitHub/Hubness_sc/data/Zheng8/zheng8_pca_readyforhubness.txt"
sdev_out <- "/Users/elise/Desktop/GitHub/Hubness_sc/data/Zheng8/zheng8_pca_sdev.txt"
filter <- function(df) {
feature <- apply(df,2,function(x) sum(x!=0, na.rm = T))
count <- apply(df,2,function(x) sum(x, na.rm=T))
print(plot(feature,count))
}
